package com.webagesolutions.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

import com.webagesolutions.records.BeanRecord;
import com.webagesolutions.records.VJPanelBeanRecord;

public class ReflectTest
{
  public static void main(String[] args)
  {
    // BeanRecord r = new BeanRecord();
    // Class<?> clazz = r.getClass();
    // Class<?> clazz = BeanRecord.class;
    Class<?> clazz = VJPanelBeanRecord.class;
    
    System.out.println("\nClass:");
    int cm = clazz.getModifiers();
    System.out.println(modifiersToString(cm) + clazz.getName());
    System.out.println(classToString(clazz));
    
    System.out.println("\nInterfaces:");
    System.out.println(interfacesToString(clazz));
    
    System.out.println("\nAll Interfaces:");
    System.out.println(allInterfacesToString(clazz));
    
    System.out.println("\nConstructors:");
    Constructor<?>[] constructors = clazz.getConstructors();
    for (Constructor<?> constructor : constructors) {
      int mods = constructor.getModifiers();
      System.out.println(modifiersToString(mods) + constructor.getName()
          + " --[" + constructor + "]");
    }

    System.out.println("\nFields:");
    Field[] fields = clazz.getFields();
    for (Field field : fields) {
      int mods = field.getModifiers();
      System.out.println(modifiersToString(mods) + field.getName() + " --["
          + field + "]");
    }

    System.out.println("\nMethods:");
    Method[] methods = clazz.getMethods();
    for (Method method : methods) {
      int mods = method.getModifiers();
      System.out.println(modifiersToString(mods) + method.getName() + " --["
          + method + "]");
    }
  }
  
  public static String interfacesToString(Class<?> c)
  {
    String s = "";
    for (Class<?> iface : c.getInterfaces()) {
      if (!"".equals("")) {
        s += ", ";
      }
      s += iface.getName();
    }
    return s;
  }
  
  public static String allInterfacesToString(Class<?> c)
  {
    String s = "";
    do {
      s += c.getName() + " --> ";
      s += interfacesToString(c);
      c = c.getSuperclass();
      if (c != null) {
        s += "\n";
      }
    } while (c != null);
    return s;
  }

  public static String classToString(Class<?> c)
  {
    String s = c.getName();
    c = c.getSuperclass();
    while (c != null) {
      s += " --> " + c.getName();
      c = c.getSuperclass();
    }
    return s;
  }

  public static String modifiersToString(int m)
  {
    String s = "";
    if (Modifier.isAbstract(m)) {
      s += "abstract ";
    }
    if (Modifier.isPrivate(m)) {
      s += "private ";
    }
    if (Modifier.isPublic(m)) {
      s += "public ";
    }
    if (Modifier.isProtected(m)) {
      s += "protected ";
    }
    if (Modifier.isStatic(m)) {
      s += "static ";
    }
    if (Modifier.isNative(m)) {
      s += "native ";
    }
    return s;
  }
}
