package com.webagesolutions.records;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.text.AbstractDocument;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

public class VJPanelBeanRecord extends JPanel
{
  private static final long serialVersionUID = 1L;
  private Map<String, Document> documents = new HashMap<String, Document>();
  private BeanRecord model;
  private Controller controller;

  private class Controller implements PropertyChangeListener
  {
    String newValue = "unknown";
    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
      if ("email".equals(evt.getPropertyName())) {
        newValue = model.getEmail();
      } else if ("name".equals(evt.getPropertyName())) {
        newValue = model.getName();
      } else if ("password".equals(evt.getPropertyName())) {
        newValue = model.getPassword();
      } else if ("userId".equals(evt.getPropertyName())) {
        newValue = model.getUserId();
      }
      ((AbstractDocument) t.getDocument()).replace(0, t.getDocument()
          .getLength(), newValue, null);
      
    }
  }

  public VJPanelBeanRecord()
  {
    this.setLayout(new GridBagLayout());
  }

  public VJPanelBeanRecord(BeanRecord model)
  {
    this();
    setModel(model);
  }

  public BeanRecord getModel()
  {
    return model;
  }

  public void setModel(BeanRecord model)
  {
    try {
      if (controller == null) {
        controller = new Controller();
      }
      if (this.model != null) {
        this.model.removePropertyChangeListener(controller);
      }
      this.model = model;
      this.model.addPropertyChangeListener(controller);
      GridBagConstraints c = new GridBagConstraints(0, 0, 1, 1, 0, 0,
          GridBagConstraints.EAST, 10, new Insets(4, 4, 4, 4), 10, 10);
      BeanInfo beanInfo = Introspector.getBeanInfo(model.getClass());
      for (PropertyDescriptor pd : beanInfo.getPropertyDescriptors()) {
        if (pd.getPropertyType() == String.class) {
          c.gridx = 0;
          String name = pd.getName();
          String value = (String) pd.getReadMethod().invoke(model,
              (Object[]) null);
          JTextField t = new JTextField(20);
          String labelValue = pd.getName() + ": ";
          this.add(new JLabel(labelValue), c);
          c.gridx = 1;
          this.add(t, c);
          documents.put(name, t.getDocument());
          ((AbstractDocument) t.getDocument()).replace(0, t.getDocument()
              .getLength(), value, null);
          c.gridy++;
        }
      }
    } catch (IntrospectionException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IllegalArgumentException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (IllegalAccessException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (InvocationTargetException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    } catch (BadLocationException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

}